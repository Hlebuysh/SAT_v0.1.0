Ввод: Считывает строку из input.txt
Клаузы разделены пробелами, символы внутри клауз вводятся слитно, отрицание обозначается заглавной буквой
Например, {{¬s,¬q},{q, r,¬p,¬s}} == SQ qrPS
---------------------------------
Вывод: записывает в файл output.txt
Первая строка - это список переменных, представленных в виде символов. 
Вторая строка - это возможная интерпретация этого. 
Если выходные данные не выданы - никакая интерпретация невозможна.
-1 означает, что не имеет значения, равно ли это 0 или 1.
---------------------------------
Оба этих кода относятся к реализации алгоритма DPLL (Davis–Putnam–Logemann–Loveland), который используется для решения задачи выполнимости булевых формул (SAT). Этот алгоритм является модификацией более раннего алгоритма DP (Davis-Putnam), который основывался на методе резолюций.
Несмотря на то, что оба кода реализуют один и тот же алгоритм, они имеют некоторые отличия:

DPLLtxt:
-Использует более объектно-ориентированный подход, в котором используются классы, перечисления и методы классов.
-Использует более простую и интуитивно понятную реализацию метода base_dpll(). В этом методе основная логика алгоритма DPLL реализована с помощью циклов и условных операторов. В целом код легко читается и понимается.
-Использует рекурсию для вызова base_dpll() с новыми параметрами, когда текущие параметры не дают результата.

DPLL:
Использует процедурный стиль программирования, без использования классов и перечислений.
Реализация метода base_dpll() менее интуитивно понятна, поскольку используется большое количество вложенных циклов и условных операторов, что затрудняет чтение кода. Метод gen_branch() также реализован более сложно, используя циклы и условные операторы.
Использует более низкоуровневый подход, где каждое значение передается между функциями через аргументы.